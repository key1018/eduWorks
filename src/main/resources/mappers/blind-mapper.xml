<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="blindMapper">

	<resultMap id="blindResult" type="Board">
		<result column="board_no" property="boardNo"/>
		<result column="board_title" property="boardTitle"/>
		<result column="board_content" property="boardContent"/>
		<result column="board_writer" property="boardWriter"/> <!-- 사원번호 -->
		<result column="b_writer" property="boWriter"/> <!-- 사원이름 -->
		<result column="dept_code" property="deptCode"/>
		<result column="job_name" property="jobName" />
		<result column="board_count" property="boardCount"/>
		<result column="board_category" property="boardCategory"/>
		<result column="board_en_date" property="boardEnDate"/>
		<result column="board_mo_date" property="boardMoDate"/>
		<result column="board_status" property="boardStatus"/>
		<result column="board_top" property="boardTop"/>
	</resultMap>
	
	<resultMap id="replyResult" type="Reply">
		<result column="reply_no" property="replyNo" />
		<result column="reply_type" property="replyType" />
		<result column="re_board_no" property="reBoardNo" />
		<result column="reply_depth" property="replyDepth" />
		<result column="reply_parent" property="replyParent" />
		<result column="reply_content" property="replyContent" />
		<result column="reply_writer" property="replyWriter" />
		<result column="reply_job" property="replyJob" />
		<result column="reply_blind" property="replyBlind" />
		<result column="reply_date" property="replyDate" />
		<result column="reply_status" property="replyStatus" />
		<result column="reply_count" property="replyCount" />
	</resultMap>
	
	<resultMap id="likeResult" type="Like">
		<result column="mem_no" property="memNo" />
		<result column="board_no" property="boardNo" />
		<result column="like_date" property="likceDate" />
		<result column="like_count" property="likeCount" />
	</resultMap>
	
	<resultMap id="reportResult" type="Report">
		<result column="rpt_no" property="rptNo" />
		<result column="rpt_ref_cat" property="rptRefCat" />
		<result column="rpt_board_no" property="rptBoardNo" />
		<result column="board_title" property="boardTitle" />
		<result column="rpt_mem_no" property="rptMemNo" />
		<result column="rpt_date" property="rptDate" />
		<result column="rpt_status" property="rptStatus" />
		<result column="rpt_st_date" property="rptStDate" />
		<result column="rpt_reason" property="rptReason" />
		<result column="rpt_count" property="rptCount" />
	</resultMap>

	<!-- 게시글 페이징 처리 -->
	<select id="selectListCountB" resultType="_int">
		select count(*)
		  from (
				select
				       board_no
				     , board_title
				     , m.mem_name as "b_writer"
				     , to_char(board_en_date, 'YYYY-MM-DD') as "board_en_date"
				     , board_count
				  from tb_board b
				  join tb_member m on(b.board_writer = m.mem_no)
				 where board_category = 3
				   and board_status = 'Y'
				   <if test="keyword != null and keyword neq ''">
				   		and board_title like ('%${keyword}%')
				   </if>
				)
	</select>
	
	<!-- 익명 게시판 리스트 조회 -->
	<select id="selectBlindList" resultMap="blindResult">
		select
			   board_no
			 , board_title
			 , m.mem_name as "b_writer"
			 , to_char(board_en_date, 'YYYY-MM-DD') as "board_en_date"
			 , board_count
		  from tb_board b
		  join tb_member m on(b.board_writer = m.mem_no)
		 where board_category = 3
		   and board_status = 'Y'
		   <if test="keyword != null and keyword neq ''">
		   		and board_title like ('%${keyword}%')
		   </if>
		 order
		 	by 1 desc
	</select>
	
	<!-- 조회수 증가 -->
	<update id="increaseCountB">
		update 
			   tb_board
		   set board_count = board_count+1
		 where board_no = #{board_no} 
		   and board_status = 'Y'
	</update>
	
	<!-- 익명 게시판 상세 조회 -->
  	<select id="selectBlind" resultMap="blindResult">
  		select
  			   board_no
  			 , board_title
  			 , board_content
  			 , board_writer
  			 , m.mem_name as "b_writer"
  			 , board_count
  			 , to_char(board_en_date, 'YYYY/MM/DD HH24:MI') as "board_en_date"
  			 , board_status
  		  from tb_board b
  		  join tb_member m on(b.board_writer = m.mem_no)
  		 where board_no = #{boardNo}
  		   and board_category = 3
  	</select>
  	
  	<!-- 댓글 수 조회 -->
  	<select id="replyCount" resultMap="replyResult">
  		select
		       re_board_no 
		     , count(*) as "reply_count"
		  from tb_reply
         where reply_type = 4
           and reply_status = 'Y'
           <if test="keyword != null and keyword neq ''">
		   		and re_board_no in (${reBoardNoStr})
		   </if>
		 group by re_board_no
		 order by 2 desc
  	</select>
  	
  	<!-- 추천 수 조회 -->
  	<select id="likeCount" resultMap="likeResult">
  		select
		       board_no 
		     , count(*) as "like_count"
		  from tb_like
		 group by board_no
		 order by 2 desc
  	</select>
  	
  	<!-- 추천 조회 -->
  	<select id="selectLike" resultMap="likeResult">
  		select
		       board_no 
		     , mem_no
		  from tb_like
		 where board_no = #{boardNo}
  	</select>
  	
  	<!-- 추천 등록 -->
  	<insert id="insertLike">
  		insert
  		  into tb_like
  		  (
  		  	mem_no
  		  , board_no
  		  )
  		  values
  		  (
  		  	#{memNo}
  		  , #{boardNo}
  		  )
  	</insert>
  	
  	<!-- 추천 해제 -->
  	<delete id="deleteLike">
  		delete
  		  from tb_like
  		 where mem_no = #{memNo}
  		   and board_no = #{boardNo}
  	</delete>
  	
  	<!-- 게시글 상세 조회 시 댓글리스트 조회 -->
  	<select id="selectReplyListB" resultMap="replyResult">
  		select 
		       reply_no
		     , re_board_no
		     , reply_depth
		     , reply_parent
		     , reply_content
		     , reply_writer
		     , reply_job
		     , reply_blind
		     , to_char(reply_date, 'YY-MM-DD HH24:MI') as "reply_date"
		     , reply_status
		  from tb_reply
		 where reply_type = 4
		   and re_board_no = #{boardNo}
		 start with reply_parent = 0
		connect by prior reply_no = reply_parent
		order siblings by reply_no asc, reply_parent asc
  	</select>
  	
  	<!-- 익명 댓글 작성시 사용하는 아이디 중복 여부 -->
  	<select id="checkReplyId" resultType="_int">
  		select
  			   count(*)
  		  from tb_reply
  		 where reply_type = 4
  		   and re_board_no = #{reBoardNo}
  		   and reply_blind = #{replyBlind}
  		   and reply_status = 'Y'
  	</select>
  	
  	<!-- 댓글 등록 -->
  	<insert id="insertReplyB">
  		insert
  		  into tb_reply
  		  (
  		  	reply_no
  		  , reply_type
  		  , re_board_no
  		  , reply_depth
  		  , reply_parent
  		  , reply_content
  		  , reply_writer
  		  , reply_job
  		  , reply_blind
  		  , reply_date
  		  , reply_wno
  		  )
  		  values
  		  (
  		  	seq_reno.nextval
  		  , 4
  		  , #{reBoardNo}
  		  , #{replyDepth}
  		  , #{replyParent}
  		  , #{replyContent}
  		  , #{replyWriter}
  		  , #{replyJob}
  		  , #{replyBlind}
  		  , sysdate
  		  , #{replyWno}
  		  )
  		  
  	</insert>
  	
  	<!-- 댓글 조회 -->
  	<select id="selectReplyB" resultMap="replyResult">
  		select 
		       reply_no
		     , re_board_no
		     , reply_depth
		     , reply_parent
		     , reply_content
		     , reply_writer
		     , reply_job
		     , reply_blind
		     , to_char(reply_date, 'YY-MM-DD HH24:MI') as "reply_date"
			 , reply_status
		  from tb_reply
		 where reply_no = #{replyNo}
		 start with reply_parent = 0
		connect by prior reply_no = reply_parent
		order siblings by reply_no asc, reply_parent asc
  	</select>
  	
  	<!-- 댓글 수정 -->
  	<update id="updateReplyB">
  		update 
  			   tb_reply
  		   set reply_content = #{replyContent},
  		   	   reply_mo_date = sysdate
  		 where reply_no = #{replyNo}
  		   and reply_status = 'Y'
  	</update>
  	
  	<!-- 댓글 삭제 -->
  	<update id="deleteReplyB">
  		update
  			   tb_reply
  		   set reply_status = 'N'
  		 where reply_no = #{replyNo}
  	</update>
  	
  	<!-- 게시글 등록 -->
  	<insert id="insertBlind">
  		insert
  		  into tb_board
  		  (
  		  	board_no
  		  , board_title
  		  , board_content
  		  , board_writer
  		  , dept_code
  		  , board_category
  		  , board_en_date
  		  )
  		  values
  		  (
  		  	seq_bono.nextval
  		  , #{boardTitle}
  		  , #{boardContent}
  		  , #{boardWriter}
  		  , #{deptCode}
  		  , 3
  		  , sysdate
  		  )
  	</insert>
  	
  	<!-- 게시글 삭제 -->
  	<update id="deleteBlind">
  		update tb_board
  		   set board_status = 'N'
  		 where board_no = #{boardNo}
  	</update>
  	
  	<!-- 게시글 수정 -->
  	<update id="updateBlind">
  		update tb_board
  		   set board_title = #{boardTitle}
  		     , board_content = #{boardContent}
  		     , board_mo_date = sysdate
  		 where board_no = #{boardNo}
  	</update>
  	
  	<!-- 신고 등록 -->
  	<insert id="insertReport">
  		insert
  		  into tb_report
  		  (
  		  	rpt_no
  		  , rpt_ref_cat
  		  , rpt_board_no
  		  , rpt_mem_no
  		  , rpt_reason_no
  		  )
  		  values
  		  (
  		  	seq_repno.nextval
  		  , #{rptRefCat}
  		  , #{rptBoardNo}
  		  , #{rptMemNo}
  		  , #{rptReasonNo}
  		  )
  	</insert>
  	
  	<!-- 신고 게시글 페이징 처리 -->
	<select id="selectListCountR" resultType="_int">
		select
			   count(*)
		  from (select
				       rpt_ref_cat
				     , rpt_board_no
				     , b.board_title
				     , count(*) as rpt_count
				     , rpt_status
				     , LISTAGG(rpt_no, ',') WITHIN GROUP(ORDER BY rpt_status desc) as rpt_no
				  from tb_report r
				  join tb_board b on (r.rpt_board_no = b.board_no)
				 where rpt_ref_cat = 1
				 <if test="rStatus != null and rStatus neq ''">
				   and rpt_status = #{rStatus}
				 </if>
				 group by rpt_ref_cat, rpt_board_no, rpt_status, b.board_title
				union all
				select
				       rpt_ref_cat
				     , rpt_board_no
				     , rp.reply_content
				     , count(*) as rpt_count
				     , rpt_status
				     , LISTAGG(rpt_no, ',') WITHIN GROUP(ORDER BY rpt_status desc) as rpt_no
				  from tb_report r
				  join tb_reply rp on (r.rpt_board_no = rp.reply_no)
				 where rpt_ref_cat = 2
				 <if test="rStatus != null and rStatus neq ''">
				   and rpt_status = #{rStatus}
				 </if>
				 group by rpt_ref_cat, rpt_board_no, rpt_status, rp.reply_content
				 order by 4 ${rCount}
		  )
	</select>
	
	<!-- 신고 게시글 리스트 조회 -->
	<select id="selectReportList" resultMap="reportResult">
		select
		       rpt_ref_cat
		     , rpt_board_no
		     , b.board_title as "board_title"
		     , count(*) as rpt_count
		     , rpt_status
		     , LISTAGG(rpt_no, ',') WITHIN GROUP(ORDER BY rpt_status desc) as rpt_no
		  from tb_report r
		  join tb_board b on (r.rpt_board_no = b.board_no)
		 where rpt_ref_cat = 1
		 <if test="rStatus != null and rStatus neq ''">
		   and rpt_status = #{rStatus}
		 </if>
		 group by rpt_ref_cat, rpt_board_no, rpt_status, b.board_title
		union all
		select
		       rpt_ref_cat
		     , rpt_board_no
		     , rp.reply_content
		     , count(*) as rpt_count
		     , rpt_status
		     , LISTAGG(rpt_no, ',') WITHIN GROUP(ORDER BY rpt_status desc) as rpt_no
		  from tb_report r
		  join tb_reply rp on (r.rpt_board_no = rp.reply_no)
		 where rpt_ref_cat = 2
		 <if test="rStatus != null and rStatus neq ''">
		   and rpt_status = #{rStatus}
		 </if>
		 group by rpt_ref_cat, rpt_board_no, rpt_status, rp.reply_content
		 order by 4 ${rCount}
	</select>
	
	<!-- 댓글이 등록된 게시글 번호 조회 -->
	<select id="checkReBoardNo" resultType="_int">
		select
			   re_board_no
		  from tb_reply
		 where reply_no = #{replyNo} 
	</select>
  	
  	<!-- 게시글 블라인드 처리 -->
  	<update id="goBoBlind">
  		update tb_board
  		   set board_status = 'B'
  		 where board_no = #{boardNo}
  	</update>
  	
  	<!-- 게시글 블라인드 해제 -->
  	<update id="clearBoBlind">
  		update tb_board
  		   set board_status = 'Y'
  		 where board_no = #{boardNo}
  	</update>
  	
  	<!-- 신고 처리 여부 변경 -->
  	<update id="reportStatus">
  		update tb_report
  		   set rpt_status = 'Y'
  		     , rpt_st_date = sysdate
  		 where rpt_no in (${rptNoStr})
  	</update>
  	
  	<!-- 댓글 블라인드 처리 -->
  	<update id="goReBlind">
  		update tb_reply
  		   set reply_status = 'B'
  		 where reply_no = #{replyNo}
  	</update>
  	
  	<!-- 신고알람용 신고자 목록 구하기(게시글) -->
  	<select id="selectTargetsB" resultMap="reportResult">
  		select distinct
		       rpt_no
		     , rpt_board_no
		     , rpt_mem_no
		     , rpt_ref_cat
		     , board_title
  		  from tb_report r
  		  join tb_board b on(r.rpt_board_no = b.board_no)
  		 where rpt_no in (${rptNoStr})
		   and rpt_status = 'N'
  	</select>
  	
  	<!-- 신고알람용 신고자 목록 구하기(댓글) -->
  	<select id="selectTargetsR" resultMap="reportResult">
  		select distinct
		       rpt_board_no
		     , rpt_mem_no
		     , rpt_ref_cat
		     , reply_content as "board_title"
		  from tb_report r
		  join tb_reply p on(r.rpt_board_no = p.reply_no)
		 where rpt_no in (${rptNoStr})
		   and rpt_status = 'N'
  	</select>
</mapper>
